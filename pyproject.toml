[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "prinvestgpt"
dynamic = ["version"]
description = '用于原则投资对接GPT'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [
  { name = "markqiu", email = "qiucheng@jinniuai.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "gradio >=3.42.0,<4.0.0",
  "langchain >=0.0.283,<0.1.0",
  "pyyaml >=6.0.1,<7.0.0",
  "duckduckgo-search >=3.8.5,<4.0.0",
  "PyPDF2 >=3.0.1,<4.0.0",
  "tiktoken >=0.4.0,<0.5.0",
  "meilisearch >=0.28.2,<1.0.0",
  "tqdm >=4.66.1,<5.0.0",
  "requests>=2.31.0",
  "pydantic>=2.3.0",
  "jionlp>=1.5.2,<2.0.0"
]

[project.urls]
Documentation = "https://github.com/markqiu/prinvestgpt#readme"
Issues = "https://github.com/markqiu/prinvestgpt/issues"
Source = "https://github.com/markqiu/prinvestgpt"

[project.scripts]

[tool.hatch.envs.default.scripts]
check = [
    "hatch run lint:all",
    "hatch run test:test",
]
meis = "hatch run scripts\\meilisearch\\start_server"
pv = "prinvestgpt.__main__:app"
install = "pip install -e ."

[tool.hatch.version]
path = "prinvestgpt/__about__.py"

[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:prinvestgpt tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "fmt",
  "typing",
]

[tool.black]
target-version = ["py310"]
line-length = 120
max-line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # RUF001 String contains ambiguous `，` (FULLWIDTH COMMA).
  "RUF001", "RUF002", "RUF003",
  # Unused function argument
  "ARG001"
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["prinvestgpt"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["prinvestgpt", "tests"]
branch = true
parallel = true
omit = [
  "prinvestgpt/__about__.py",
]

[tool.coverage.paths]
prinvestgpt = ["prinvestgpt", "scripts"]
tests = ["tests", "*/prinvestgpt/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
